# Generated by Django 3.2.3 on 2025-01-07 18:21

import colorfield.fields
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import layer.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Basemap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, help_text='ZXY url to map. Accepts //, http or https', max_length=255, null=True, verbose_name='Url')),
                ('label', models.CharField(blank=True, help_text='Label to show on app', max_length=40, null=True, verbose_name='Label')),
                ('tag', models.CharField(help_text='Tag to show on app', max_length=40, verbose_name='Tag')),
                ('attribution', models.CharField(blank=True, help_text='Basemap attribution', max_length=255, null=True, verbose_name='Attribution')),
                ('order', models.IntegerField(default=1, help_text='Basemap order on app', verbose_name='Order')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, null=True, unique=True, verbose_name='Name')),
                ('icon', models.CharField(blank=True, default='layers', max_length=255, null=True, verbose_name='Icon')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Geoserver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Geoserver Name', max_length=255, verbose_name='Name')),
                ('wms_url', models.CharField(help_text='Default url to Web Map Service (WMS)', max_length=500)),
                ('thumbnail_url', models.URLField(blank=True, help_text='Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/wms/reflect?', max_length=500, null=True, verbose_name='Geoserver Thumbnail URL')),
                ('preview_url', models.URLField(blank=True, help_text='Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&WIDTH=40&HEIGHT=40', max_length=500, null=True, verbose_name='Geoserver Preview URL')),
                ('geoserver_url', models.URLField(blank=True, help_text='Default Geoserver URL in format https://**GEOSERVER**.com/geoserver/', max_length=500, null=True, verbose_name='Geoserver URL')),
            ],
            options={
                'verbose_name': 'Geoserver',
                'verbose_name_plural': 'Geoservers',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Group Layer name', max_length=255, unique=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description')),
                ('order', models.IntegerField(help_text='Order to show on app', verbose_name='Order')),
                ('category_groups', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='category', to='layer.category')),
            ],
            options={
                'ordering': ['-order', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Order')),
                ('layer_type', models.CharField(max_length=40, verbose_name='Layer Type')),
                ('active_on_init', models.BooleanField(default=False, help_text='Show layer as active when app starts', verbose_name='Active on Init')),
                ('is_downloadable', models.BooleanField(default=False, help_text='Enable layer download', verbose_name='Is Downloadable')),
                ('fonte', models.CharField(blank=True, max_length=255, verbose_name='Fonte')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is Public')),
                ('dt_atualizacao', models.DateField(blank=True, null=True, verbose_name='Atualização')),
                ('database_layer_name', models.CharField(max_length=255, verbose_name='Database Layer Name')),
                ('bbox', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='layers', to='layer.group')),
            ],
            options={
                'ordering': ['-order'],
            },
        ),
        migrations.CreateModel(
            name='Tms',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layer.layer')),
                ('url', models.CharField(blank=True, max_length=500, null=True, verbose_name='Tile Map Service Url')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('max_native_zoom', models.IntegerField(blank=True, null=True, verbose_name='Max Native Zoom')),
                ('is_tms', models.BooleanField(default=True, help_text='TMS layer = True. XYZ layer = False', verbose_name='Is a TMS Layer')),
                ('image_preview', models.FileField(blank=True, null=True, upload_to='', verbose_name='Image preview')),
                ('thumbnail_blob', models.BinaryField(blank=True, null=True)),
                ('legend', models.FileField(blank=True, null=True, upload_to='', verbose_name='Legend')),
                ('legend_blob', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'TMS',
                'verbose_name_plural': 'TMS',
            },
            bases=('layer.layer',),
        ),
        migrations.CreateModel(
            name='Vector',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layer.layer')),
                ('file', models.FileField(blank=True, null=True, upload_to='', validators=[layer.utils.validate_json_extension], verbose_name='File Path')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('type', models.CharField(choices=[('Raster', 'Raster'), ('Point', 'Point'), ('Point-Icon', 'Point-Icon'), ('Line', 'Line'), ('Polygon', 'Polygon'), ('Video', 'Video'), ('streaming', 'Streaming')], default='Polygon', max_length=40, verbose_name='Vector Layer Type')),
                ('color', colorfield.fields.ColorField(default='#3388FF', image_field=None, max_length=25, samples=None, verbose_name='Color')),
                ('color_fill', colorfield.fields.ColorField(default='#3388FF', image_field=None, max_length=25, samples=None, verbose_name='Color Fill')),
                ('has_opacity', models.BooleanField(default=True, help_text='Shows opacity label on app', verbose_name='Has opacity')),
                ('default_opacity', models.PositiveIntegerField(blank=True, help_text='Default value opacity between 0 and 100', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Default opacity')),
                ('image_preview', models.FileField(blank=True, null=True, upload_to='', verbose_name='Image preview')),
                ('thumbnail_blob', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Vector',
                'verbose_name_plural': 'Vectors',
            },
            bases=('layer.layer',),
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default', models.CharField(blank=True, help_text='Shows default value for filter on app', max_length=40, null=True, verbose_name='Default value for filters')),
                ('alias', models.CharField(blank=True, help_text='Indicates which field will be filtered on app', max_length=255, null=True, verbose_name='Filter alias')),
                ('type', models.CharField(help_text='Type of filter on app', max_length=40, verbose_name='Filter Type')),
                ('label', models.CharField(help_text='A default label for filter', max_length=40, verbose_name='Filter Label')),
                ('layers', models.ManyToManyField(blank=True, related_name='filters', to='layer.Layer')),
            ],
        ),
        migrations.CreateModel(
            name='Wms',
            fields=[
                ('layer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='layer.layer')),
                ('has_preview', models.BooleanField(default=True, help_text='Show layer thumbnails on app', verbose_name='Has Preview')),
                ('has_detail', models.BooleanField(default=False, help_text='Show layer legend on app', verbose_name='Has Detail')),
                ('detail_width', models.IntegerField(blank=True, help_text='Max width for legend on app', null=True, verbose_name='Detail width')),
                ('geoserver_layer_name', models.CharField(blank=True, help_text='Geoserver layer name', max_length=255, null=True, verbose_name='Geoserver Layer Name')),
                ('geoserver_layer_namespace', models.CharField(blank=True, help_text='Geoserver layer namespace', max_length=40, null=True, verbose_name='Geoserver Layer Namespace')),
                ('geoserver_layer_options', models.JSONField(blank=True, help_text='Geoserver layer extra options', null=True, verbose_name='Geoserver Layer Options')),
                ('queryable', models.BooleanField(default=True, help_text='Shows popup attribution on app', verbose_name='Is queryable')),
                ('has_opacity', models.BooleanField(default=True, help_text='Shows opacity label on app', verbose_name='Has opacity')),
                ('default_opacity', models.PositiveIntegerField(blank=True, help_text='Default value opacity between 0 and 100', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Default opacity')),
                ('has_sublayers', models.BooleanField(default=False, help_text='Shows sublayers on app', verbose_name='Has Sublayers')),
                ('wms_layer_type', models.CharField(choices=[('Raster', 'Raster'), ('Point', 'Point'), ('Point-Icon', 'Point-Icon'), ('Line', 'Line'), ('Polygon', 'Polygon'), ('Video', 'Video')], default='Polygon', max_length=40, verbose_name='WMS Layer Type')),
                ('preview_type', models.CharField(blank=True, choices=[('thumbnail', 'Thumbnail'), ('preview', 'Preview')], default='thumbnail', help_text='Layer preview/thumbnail type', max_length=40, null=True, verbose_name='Preview type')),
                ('thumbnail_blob', models.BinaryField(blank=True, null=True)),
                ('has_metadata', models.BooleanField(default=False, help_text='Has metadata attributes on Geoserver', verbose_name='Has Metadata')),
                ('geoserver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='layers', to='layer.geoserver')),
            ],
            options={
                'verbose_name': 'WMS',
                'verbose_name_plural': 'WMS',
            },
            bases=('layer.layer',),
        ),
        migrations.CreateModel(
            name='VectorGeometry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('properties', models.JSONField(blank=True, help_text='Uploaded file properties.', null=True, verbose_name='Properties')),
                ('vector_uploaded', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector_geometry', to='layer.vector')),
            ],
            options={
                'verbose_name_plural': 'Vector Geometries',
            },
        ),
    ]
