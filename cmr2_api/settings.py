"""
Django settings for cmr2_api project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import ast
import os
from environs import Env
import datetime
import json
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, PosixGroupType
import ldap

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')

# DB
DB_NAME = env.str('DB_NAME')
DB_USER = env.str('DB_USER')
DB_PASSWORD = env.str('DB_PASSWORD')
DB_HOST = env.str('DB_HOST')
DB_PORT = env.str('DB_PORT', 5432)

RESET_PASSWORD_URL = env.str('RESET_PASSWORD_URL')

# DB_FOR_READ
DB_NAME_FOR_READ = env.str('DB_NAME_FOR_READ')
DB_USER_FOR_READ = env.str('DB_USER_FOR_READ')
DB_PASSWORD_FOR_READ = env.str('DB_PASSWORD_FOR_READ')
DB_HOST_FOR_READ = env.str('DB_HOST_FOR_READ')
DB_PORT_FOR_READ = env.int('DB_PORT_FOR_READ', 5432)

EMAIL_TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates', 'email')

LDAP_URI = env.str('LDAP_URI')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$e1+*b)cda+58=dv!_uphj13ugcjmdj3249zq#-w*n)wi(g@%r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'drf_spectacular',
    'django_filters',
    'rest_framework',
    'django_json_widget',
    'dashboard',
    'rest_framework_gis',
    'rest_framework_simplejwt.token_blacklist',
    'user',
    'permission',
    'layer',
    'admin_panel',
    'leaflet',
    'import_export',
    'priority_alerts',
    'funai',
    'land_use',
    'corsheaders',
    'history'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cmr2_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cmr2_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    },
    'db_for_read': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': DB_NAME_FOR_READ,
        'USER': DB_USER_FOR_READ,
        'PASSWORD': DB_PASSWORD_FOR_READ,
        'HOST': DB_HOST_FOR_READ,
        'PORT': DB_PORT_FOR_READ,
    }
}

DATABASE_ROUTERS = []

# Only add routers if db_for_read is configured
if 'db_for_read' in DATABASES:
    DATABASE_ROUTERS = [
        'cmr2_api.database_routers.FunaiRouters.FunaiRouter',
        'cmr2_api.database_routers.LandUseRouters.LandUseRouter',
        'cmr2_api.database_routers.MonitoringRouters.MonitoringRouter',
        'cmr2_api.database_routers.PriorityAlertsRouters.PriorityAlertsRouter',
        'cmr2_api.database_routers.UserAdminRouters.UserAdminRouter',
        'cmr2_api.database_routers.PriorityMonitoringRouters.PriorityMonitoringRouter',
    ]

if DEBUG:
    INTERNAL_IPS = ('127.0.0.1',)
    ALLOWED_HOSTS = ['*']

    if os.getenv('ALLOWED_HOSTS'):
        ALLOWED_HOSTS = json.loads(os.environ['ALLOWED_HOSTS'])

    MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')
    CORS_ORIGIN_ALLOW_ALL = True

VIDEO_TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates', 'video')
DOC_TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates', 'doc')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom user model
AUTH_USER_MODEL = 'user.User'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

COMPONENT_LIST = ast.literal_eval(os.getenv(
    'COMPONENT_LIST',
    "[\
        ('layers', 'Camadas de Sobreposição'),\
        ('monitoring', 'Monitoramento Diário'),\
        ('layers_mosaics', 'Alta Resolução e Mosaicos'),\
        ('layers_planet', 'Camadas Planet'),\
        ('land_use', 'Uso e Ocupação do Solo'),\
        ('analytics', 'Módulo Analítico'),\
        ('admin_panel', 'Painel Administrativo'),\
        ('feedback_dev', 'Críticas e Sugestões Dev'),\
        ('feedback_admin', 'Críticas e Sugestões ADM'),\
    ]"
))


# Django restframework simplejwt configuration
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(
        minutes=int(
            os.environ.get(
                'ACCESS_TOKEN_LIFETIME',
                '9999'
            )
        )
    ),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(
        hours=int(
            os.environ.get(
                'REFRESH_TOKEN_LIFETIME', '24'
            )
        )
    ),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'UPDATE_LAST_LOGIN': True,
}

#########################################################################
#                       Django Jazzmin settings                         #
#########################################################################
# https://django-jazzmin.readthedocs.io/configuration/

JAZZMIN_HIDE_APPS = json.loads(os.environ.get(
    'JAZZMIN_HIDE_APPS', '[]'))
JAZZMIN_HIDE_MODELS = json.loads(
    os.environ.get('JAZZMIN_HIDE_MODELS', '[]'))
JAZZMIN_ADMIN_SITE_TITLE = os.getenv(
    'JAZZMIN_ADMIN_SITE_TITLE', 'CMR ADMIN')
JAZZMIN_ADMIN_SITE_HEADER = os.getenv(
    'JAZZMIN_ADMIN_SITE_HEADER', 'CMR ADMIN')
JAZZMIN_ADMIN_SITE_BRAND = os.getenv('JAZZMIN_ADMIN_SITE_BRAND', 'CMR')
JAZZMIN_ADMIN_SITE_LOGO = os.getenv(
    'JAZZMIN_ADMIN_SITE_LOGO', '/admin_files/img/favicon.ico')
JAZZMIN_ADMIN_LOGIN_LOGO = os.getenv(
    'JAZZMIN_ADMIN_LOGIN_LOGO', '/admin_files/img/logo-inteira-antiga-branca.png')
JAZZMIN_ADMIN_SITE_FAVICON = os.getenv(
    'JAZZMIN_ADMIN_SITE_FAVICON', '/admin_files/img/favicon.ico')

JAZZMIN_SETTINGS = {
    'site_title': JAZZMIN_ADMIN_SITE_TITLE,
    'site_header': JAZZMIN_ADMIN_SITE_HEADER,
    'site_brand': JAZZMIN_ADMIN_SITE_BRAND,
    'hide_apps': JAZZMIN_HIDE_APPS,
    'hide_models': JAZZMIN_HIDE_MODELS,
    'site_logo': JAZZMIN_ADMIN_SITE_LOGO,  # Top left admin
    'login_logo': JAZZMIN_ADMIN_LOGIN_LOGO,  # Login site
    'login_logo_dark': JAZZMIN_ADMIN_LOGIN_LOGO,  # Login site
    'site_icon': JAZZMIN_ADMIN_SITE_FAVICON,  # Favicon
    'site_logo_classes': 'img-circle bg-light',
    'welcome_sign': 'Admin control panel',
    'show_sidebar': True,
    'navigation_expanded': False,
    'copyright': 'Hex360 Ltda',
    'topmenu_links': [
        {'name': 'Home',  'url': 'admin:index'},
        {'model': 'auth.User'},
    ],
    'icons': {
        'user': 'fas fa-user',
        'authtoken': 'fas fa-key',
        'imagery': 'fas fa-satellite',
        'agro': 'fas fa-tree',
        'layer': 'fas fa-layer-group',
        'user_settings': 'fas fa-user-cog',
        'management': 'fas fa-tasks',
        'permission': 'fas fa-fingerprint',
        'smart_cities': 'fas fa-city',
    },
    'default_icon_parents': 'fas fa-chevron-circle-right',
    'default_icon_children': 'fas',
    'order_with_respect_to': [
        'agro',
        'authtoken',
        'image',
        'imagery',
        'layer',
        'management',
        'permission',
        'smart_cities',
        'user',
        'user_settings',
    ],
    'custom_css': '/admin_files/css/main.css',
    'custom_js': '/admin_files/js/main.js'
}

JAZZMIN_UI_TWEAKS = {
    'navbar_small_text': False,
    'footer_small_text': False,
    'body_small_text': False,
    'brand_small_text': False,
    'brand_colour': False,
    'accent': 'accent-info',
    'navbar': 'navbar-dark',
    'no_navbar_border': False,
    'navbar_fixed': True,
    'layout_boxed': False,
    'footer_fixed': False,
    'sidebar_fixed': False,
    'sidebar': 'sidebar-dark-primary',
    'sidebar_nav_small_text': True,
    'sidebar_disable_expand': False,
    'sidebar_nav_child_indent': False,
    'sidebar_nav_compact_style': False,
    'sidebar_nav_legacy_style': False,
    'sidebar_nav_flat_style': True,
    'theme': 'solar',
    'dark_mode_theme': 'darkly',
    'button_classes': {
        'primary': 'btn-primary',
        'secondary': 'btn-secondary',
        'info': 'btn-info',
        'warning': 'btn-warning',
        'danger': 'btn-danger',
        'success': 'btn-success'
    },
    'actions_sticky_top': True
}


#########################################################################
#                           EMAIL CONFIGURATION                         #
#########################################################################

EMAIL_BACKEND = os.getenv(
    'EMAIL_BACKEND',
    'django.core.mail.backends.smtp.EmailBackend'
)
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 1025))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'cmr@funai.gov.br')
EMAIL_SUBJECT_PREFIX = '[CMR] Centro de Monitoramento Remoto'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = '10.0.0.22'
# EMAIL_PORT = '25'
# EMAIL_ADMIN_FEEDBACK = ""
# DEFAULT_FROM_EMAIL = "cmr@funai.gov.br"

################################################################################
####                           LDAP CONFIGURATION                           ####
################################################################################

AUTH_LDAP_SERVER_URI = LDAP_URI
AUTH_LDAP_SERVER_URI = LDAP_URI

AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "OU=FUNAI,DC=funai,DC=local", ldap.SCOPE_SUBTREE, "(mail=%(user)s)"
)

AUTH_LDAP_START_TLS = False

AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0,
}

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTH_LDAP_ALWAYS_UPDATE_USER = True

AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_CACHE_TIMEOUT = 3600

AUTHENTICATION_BACKENDS = (
    'cmr2_api.auth_backends.MyLDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

DATA_UPLOAD_MAX_NUMBER_FIELDS = int(
    os.getenv('DATA_UPLOAD_MAX_NUMBER_FIELDS', 10240)
)
